
// Code generated by stanc v2.26.1
#include <stan/model/model_header.hpp>
namespace random_waning_model_namespace {


inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}

inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}


using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 

stan::math::profile_map profiles__;
static int current_statement__= 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 78, column 4 to column 16)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 79, column 4 to column 24)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 80, column 4 to column 21)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 81, column 4 to column 17)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 82, column 4 to column 24)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 83, column 4 to column 26)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 84, column 4 to column 24)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 85, column 4 to column 25)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 86, column 4 to column 25)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 87, column 4 to column 22)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 88, column 4 to column 22)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 89, column 4 to column 33)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 92, column 4 to column 61)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 93, column 4 to column 46)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 94, column 4 to column 24)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 96, column 20 to column 24)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 96, column 5 to column 26)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 97, column 12 to column 16)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 97, column 5 to column 49)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 98, column 12 to column 16)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 98, column 5 to column 50)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 99, column 12 to column 16)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 99, column 5 to column 46)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 100, column 12 to column 16)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 100, column 5 to column 40)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 102, column 9 to column 28)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 103, column 9 to line 104, column 100)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 101, column 23 to line 105, column 6)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 101, column 5 to line 105, column 6)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 95, column 4 to line 106, column 5)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 133, column 4 to column 21)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 136, column 9 to column 78)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 135, column 24 to line 137, column 9)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 135, column 8 to line 137, column 9)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 134, column 19 to line 138, column 5)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 134, column 4 to line 138, column 5)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 112, column 16 to column 107)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 111, column 29 to line 113, column 13)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 111, column 12 to line 113, column 13)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 110, column 23 to line 114, column 9)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 110, column 8 to line 114, column 9)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 109, column 19 to line 115, column 5)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 109, column 4 to line 115, column 5)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 116, column 4 to column 26)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 117, column 4 to column 25)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 118, column 4 to column 23)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 119, column 4 to column 22)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 120, column 4 to column 21)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 121, column 4 to column 28)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 122, column 4 to column 30)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 123, column 4 to column 28)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 124, column 4 to column 30)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 126, column 4 to column 29)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 127, column 4 to column 25)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 128, column 4 to column 43)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 130, column 2 to column 22)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 129, column 4 to line 130, column 22)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 51, column 4 to column 10)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 52, column 4 to column 20)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 53, column 4 to column 22)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 54, column 17 to column 18)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 54, column 11 to column 13)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 54, column 4 to column 20)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 55, column 17 to column 18)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 55, column 11 to column 13)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 55, column 4 to column 20)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 56, column 13 to column 17)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 56, column 19 to column 21)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 56, column 4 to column 23)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 57, column 22 to column 26)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 57, column 11 to column 15)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 57, column 4 to column 28)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 58, column 11 to column 15)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 58, column 4 to column 22)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 59, column 4 to column 20)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 60, column 4 to column 11)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 61, column 4 to column 11)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 62, column 4 to column 11)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 63, column 11 to column 15)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 63, column 17 to column 19)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 63, column 4 to column 26)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 64, column 11 to column 15)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 64, column 17 to column 19)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 64, column 4 to column 28)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 65, column 11 to column 15)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 65, column 17 to column 19)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 65, column 4 to column 26)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 66, column 11 to column 15)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 66, column 17 to column 19)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 66, column 4 to column 24)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 67, column 11 to column 12)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 67, column 4 to column 24)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 68, column 19 to column 20)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 68, column 11 to column 13)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 68, column 4 to column 22)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 69, column 14 to column 15)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 69, column 4 to column 17)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 70, column 4 to column 13)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 73, column 4 to column 44)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 75, column 8 to column 21)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 74, column 4 to line 75, column 21)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 81, column 11 to column 13)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 82, column 11 to column 13)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 83, column 11 to column 13)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 84, column 11 to column 13)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 86, column 19 to column 23)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 86, column 11 to column 15)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 87, column 12 to column 16)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 89, column 25 to column 29)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 92, column 11 to column 15)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 92, column 17 to column 21)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 93, column 11 to column 12)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 94, column 18 to column 22)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 94, column 11 to column 13)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 133, column 18 to column 19)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 133, column 11 to column 13)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 3, column 8 to column 35)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 2, column 57 to line 4, column 5)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 7, column 8 to column 38)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 6, column 58 to line 8, column 5)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 12, column 8 to column 22)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 13, column 8 to column 28)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 14, column 15 to column 21)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 14, column 8 to column 50)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 15, column 8 to column 20)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 16, column 8 to column 52)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 17, column 8 to column 18)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 19, column 12 to column 27)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 23, column 16 to column 55)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 22, column 19 to line 24, column 13)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 21, column 16 to column 61)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 20, column 31 to line 22, column 13)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 20, column 12 to line 24, column 13)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 25, column 12 to column 22)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 18, column 30 to line 26, column 9)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 18, column 8 to line 26, column 9)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 27, column 8 to column 24)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 11, column 49 to line 28, column 5)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 37, column 12 to column 47)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 34, column 12 to line 35, column 66)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 33, column 13 to line 37, column 47)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 32, column 12 to column 46)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 31, column 8 to line 37, column 47)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 30, column 59 to line 38, column 5)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 40, column 5 to column 15)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 41, column 5 to column 19)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 43, column 9 to column 77)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 44, column 9 to column 24)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 42, column 23 to line 45, column 6)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 42, column 5 to line 45, column 6)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 46, column 5 to column 52)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 47, column 5 to column 15)",
                                                      " (in '/home/josephdi/titer-sims/validation_sims/fluvacs/models/random_waning.stan', line 39, column 52 to line 48, column 2)"};


template <typename T0__, typename T1__, typename T2__, typename T3__>
stan::promote_args_t<T0__, T1__, T2__,
T3__>
mu_evolve(const T0__& mu, const T1__& dt, const T2__& boost, const T3__& k,
          std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 117;
    return ((mu - (dt * k)) + boost);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct mu_evolve_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
stan::promote_args_t<T0__, T1__, T2__,
T3__>
operator()(const T0__& mu, const T1__& dt, const T2__& boost, const T3__& k,
           std::ostream* pstream__)  const 
{
return mu_evolve(mu, dt, boost, k, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__>
stan::promote_args_t<T0__, T1__, T2__,
T3__>
mu_evolve2(const T0__& mu, const T1__& dt, const T2__& boost, const T3__& k,
           std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 119;
    return (mu / (1 - ((dt * k) * mu)));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct mu_evolve2_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
stan::promote_args_t<T0__, T1__, T2__,
T3__>
operator()(const T0__& mu, const T1__& dt, const T2__& boost, const T3__& k,
           std::ostream* pstream__)  const 
{
return mu_evolve2(mu, dt, boost, k, pstream__);
}
};

template <typename T1__, typename T2__, typename T3__, typename T4__,
typename T5__, typename T6__>
Eigen::Matrix<stan::promote_args_t<T1__, T2__, T3__, T4__,
T5__, stan::promote_args_t<stan::value_type_t<T6__>>>, -1, 1>
mu_calc(const int& Nt, const T1__& mu0, const T2__& vax_boost,
        const T3__& flu_boost, const T4__& t_flu, const T5__& k,
        const T6__& t_arg__, const std::vector<int>& mask,
        std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T1__,
          T2__,
          T3__,
          T4__,
          T5__, stan::promote_args_t<stan::value_type_t<T6__>>>;
  const auto& t = to_ref(t_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    local_scalar_t__ t0;
    t0 = DUMMY_VAR__;
    
    current_statement__ = 121;
    t0 = 0.0;
    local_scalar_t__ dt;
    dt = DUMMY_VAR__;
    
    current_statement__ = 122;
    dt = (t[(1 - 1)] - t0);
    current_statement__ = 123;
    validate_non_negative_index("mu", "Nt + 2", (Nt + 2));
    Eigen::Matrix<local_scalar_t__, -1, 1> mu;
    mu = Eigen::Matrix<local_scalar_t__, -1, 1>((Nt + 2));
    stan::math::fill(mu, DUMMY_VAR__);
    
    current_statement__ = 124;
    assign(mu, nil_index_list(), rep_vector(0, (Nt + 2)),
      "assigning variable mu");
    current_statement__ = 125;
    assign(mu, cons_list(index_uni(1), nil_index_list()), mu0,
      "assigning variable mu");
    current_statement__ = 126;
    assign(mu, cons_list(index_uni(2), nil_index_list()),
      mu_evolve(mu[(1 - 1)], dt, vax_boost, k, pstream__),
      "assigning variable mu");
    current_statement__ = 127;
    t0 = t[(1 - 1)];
    current_statement__ = 136;
    for (int j = 3; j <= (Nt + 2); ++j) {
      current_statement__ = 128;
      dt = (t[(j - 1)] - t0);
      current_statement__ = 133;
      if (logical_eq(t[(j - 1)], t_flu)) {
        current_statement__ = 131;
        assign(mu, cons_list(index_uni(j), nil_index_list()),
          mu_evolve(mu[((j - 1) - 1)], dt, flu_boost, k, pstream__),
          "assigning variable mu");
      } else {
        current_statement__ = 129;
        assign(mu, cons_list(index_uni(j), nil_index_list()),
          mu_evolve(mu[((j - 1) - 1)], dt, 0.0, k, pstream__),
          "assigning variable mu");
      }
      current_statement__ = 134;
      t0 = t[(j - 1)];}
    current_statement__ = 137;
    return rvalue(mu, cons_list(index_multi(mask), nil_index_list()), "mu");
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct mu_calc_functor__ {
template <typename T1__, typename T2__, typename T3__, typename T4__,
typename T5__, typename T6__>
Eigen::Matrix<stan::promote_args_t<T1__, T2__, T3__, T4__,
T5__, stan::promote_args_t<stan::value_type_t<T6__>>>, -1, 1>
operator()(const int& Nt, const T1__& mu0, const T2__& vax_boost,
           const T3__& flu_boost, const T4__& t_flu, const T5__& k,
           const T6__& t, const std::vector<int>& mask,
           std::ostream* pstream__)  const 
{
return mu_calc(Nt, mu0, vax_boost, flu_boost, t_flu, k, t, mask, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__>
stan::promote_args_t<T0__, T1__, T2__,
T3__>
log_lik_fn(const T0__& y, const T1__& obs, const T2__& mu, const T3__& sigma,
           std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 143;
    if (logical_eq(y, 0)) {
      current_statement__ = 142;
      return normal_lcdf(y, mu, sigma);
    } else {
      current_statement__ = 141;
      if (logical_eq(obs, 1)) {
        current_statement__ = 140;
        return log_diff_exp(normal_lcdf(y, mu, sigma),
                 normal_lcdf((y - 1), mu, sigma));
      } else {
        current_statement__ = 139;
        return normal_lccdf(y, mu, sigma);
      }
    }
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct log_lik_fn_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
stan::promote_args_t<T0__, T1__, T2__,
T3__>
operator()(const T0__& y, const T1__& obs, const T2__& mu, const T3__& sigma,
           std::ostream* pstream__)  const 
{
return log_lik_fn(y, obs, mu, sigma, pstream__);
}
};

template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
T1__>
expected_value(const T0__& mu, const T1__& sigma, const int& ymax,
               std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    local_scalar_t__ prob;
    prob = DUMMY_VAR__;
    
    local_scalar_t__ ev;
    ev = DUMMY_VAR__;
    
    current_statement__ = 146;
    ev = 0.0;
    current_statement__ = 150;
    for (int j = 1; j <= ymax; ++j) {
      current_statement__ = 147;
      prob = (normal_cdf(j, mu, sigma) - normal_cdf((j - 1), mu, sigma));
      current_statement__ = 148;
      ev = (ev + (j * prob));}
    current_statement__ = 151;
    ev = (ev + (ymax * (1 - normal_cdf(ymax, mu, sigma))));
    current_statement__ = 152;
    return ev;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct expected_value_functor__ {
template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
T1__>
operator()(const T0__& mu, const T1__& sigma, const int& ymax,
           std::ostream* pstream__)  const 
{
return expected_value(mu, sigma, ymax, pstream__);
}
};

class random_waning_model final : public model_base_crtp<random_waning_model> {

 private:
  int N;
  int Nt;
  int Nsub;
  std::vector<Eigen::Matrix<double, -1, 1>> y;
  std::vector<Eigen::Matrix<double, -1, 1>> w;
  std::vector<std::vector<int>> mask;
  std::vector<Eigen::Matrix<double, -1, 1>> tvec;
  Eigen::Matrix<double, -1, 1> tflu;
  int Kc;
  int Kt;
  int Kf;
  int Kw;
  Eigen::Matrix<double, -1, -1> Xcov;
  Eigen::Matrix<double, -1, -1> Xtreat;
  Eigen::Matrix<double, -1, -1> Xflu;
  Eigen::Matrix<double, -1, -1> Xk;
  Eigen::Matrix<double, -1, -1> Xbatch;
  std::vector<Eigen::Matrix<double, -1, 1>> obs;
  std::vector<int> mu_id;
  int p_re;
  Eigen::Matrix<double, -1, -1> I;
 
 public:
  ~random_waning_model() { }
  
  inline std::string model_name() const final { return "random_waning_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.26.1", "stancflags = "};
  }
  
  
  random_waning_model(stan::io::var_context& context__,
                      unsigned int random_seed__ = 0,
                      std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "random_waning_model_namespace::random_waning_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 58;
      context__.validate_dims("data initialization","N","int",
          context__.to_vec());
      N = std::numeric_limits<int>::min();
      
      current_statement__ = 58;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 59;
      context__.validate_dims("data initialization","Nt","int",
          context__.to_vec());
      Nt = std::numeric_limits<int>::min();
      
      current_statement__ = 59;
      Nt = context__.vals_i("Nt")[(1 - 1)];
      current_statement__ = 59;
      current_statement__ = 59;
      check_greater_or_equal(function__, "Nt", Nt, 0);
      current_statement__ = 60;
      context__.validate_dims("data initialization","Nsub","int",
          context__.to_vec());
      Nsub = std::numeric_limits<int>::min();
      
      current_statement__ = 60;
      Nsub = context__.vals_i("Nsub")[(1 - 1)];
      current_statement__ = 60;
      current_statement__ = 60;
      check_greater_or_equal(function__, "Nsub", Nsub, 0);
      current_statement__ = 61;
      validate_non_negative_index("y", "N", N);
      current_statement__ = 62;
      validate_non_negative_index("y", "Nt", Nt);
      current_statement__ = 63;
      context__.validate_dims("data initialization","y","double",
          context__.to_vec(N, Nt));
      y = std::vector<Eigen::Matrix<double, -1, 1>>(N, Eigen::Matrix<double, -1, 1>(Nt));
      stan::math::fill(y, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> y_flat__;
        current_statement__ = 63;
        assign(y_flat__, nil_index_list(), context__.vals_r("y"),
          "assigning variable y_flat__");
        current_statement__ = 63;
        pos__ = 1;
        current_statement__ = 63;
        for (int sym1__ = 1; sym1__ <= Nt; ++sym1__) {
          current_statement__ = 63;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 63;
            assign(y,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              y_flat__[(pos__ - 1)], "assigning variable y");
            current_statement__ = 63;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 64;
      validate_non_negative_index("w", "N", N);
      current_statement__ = 65;
      validate_non_negative_index("w", "Nt", Nt);
      current_statement__ = 66;
      context__.validate_dims("data initialization","w","double",
          context__.to_vec(N, Nt));
      w = std::vector<Eigen::Matrix<double, -1, 1>>(N, Eigen::Matrix<double, -1, 1>(Nt));
      stan::math::fill(w, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> w_flat__;
        current_statement__ = 66;
        assign(w_flat__, nil_index_list(), context__.vals_r("w"),
          "assigning variable w_flat__");
        current_statement__ = 66;
        pos__ = 1;
        current_statement__ = 66;
        for (int sym1__ = 1; sym1__ <= Nt; ++sym1__) {
          current_statement__ = 66;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 66;
            assign(w,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              w_flat__[(pos__ - 1)], "assigning variable w");
            current_statement__ = 66;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 67;
      validate_non_negative_index("mask", "Nsub", Nsub);
      current_statement__ = 68;
      validate_non_negative_index("mask", "Nt", Nt);
      current_statement__ = 69;
      context__.validate_dims("data initialization","mask","int",
          context__.to_vec(Nsub, Nt));
      mask = std::vector<std::vector<int>>(Nsub, std::vector<int>(Nt, std::numeric_limits<int>::min()));
      
      {
        std::vector<int> mask_flat__;
        current_statement__ = 69;
        assign(mask_flat__, nil_index_list(), context__.vals_i("mask"),
          "assigning variable mask_flat__");
        current_statement__ = 69;
        pos__ = 1;
        current_statement__ = 69;
        for (int sym1__ = 1; sym1__ <= Nt; ++sym1__) {
          current_statement__ = 69;
          for (int sym2__ = 1; sym2__ <= Nsub; ++sym2__) {
            current_statement__ = 69;
            assign(mask,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              mask_flat__[(pos__ - 1)], "assigning variable mask");
            current_statement__ = 69;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 70;
      validate_non_negative_index("tvec", "Nsub", Nsub);
      current_statement__ = 71;
      validate_non_negative_index("tvec", "Nt + 2", (Nt + 2));
      current_statement__ = 72;
      context__.validate_dims("data initialization","tvec","double",
          context__.to_vec(Nsub, (Nt + 2)));
      tvec = std::vector<Eigen::Matrix<double, -1, 1>>(Nsub, Eigen::Matrix<double, -1, 1>(
        (Nt + 2)));
      stan::math::fill(tvec, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> tvec_flat__;
        current_statement__ = 72;
        assign(tvec_flat__, nil_index_list(), context__.vals_r("tvec"),
          "assigning variable tvec_flat__");
        current_statement__ = 72;
        pos__ = 1;
        current_statement__ = 72;
        for (int sym1__ = 1; sym1__ <= (Nt + 2); ++sym1__) {
          current_statement__ = 72;
          for (int sym2__ = 1; sym2__ <= Nsub; ++sym2__) {
            current_statement__ = 72;
            assign(tvec,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              tvec_flat__[(pos__ - 1)], "assigning variable tvec");
            current_statement__ = 72;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 73;
      validate_non_negative_index("tflu", "Nsub", Nsub);
      current_statement__ = 74;
      context__.validate_dims("data initialization","tflu","double",
          context__.to_vec(Nsub));
      tflu = Eigen::Matrix<double, -1, 1>(Nsub);
      stan::math::fill(tflu, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> tflu_flat__;
        current_statement__ = 74;
        assign(tflu_flat__, nil_index_list(), context__.vals_r("tflu"),
          "assigning variable tflu_flat__");
        current_statement__ = 74;
        pos__ = 1;
        current_statement__ = 74;
        for (int sym1__ = 1; sym1__ <= Nsub; ++sym1__) {
          current_statement__ = 74;
          assign(tflu, cons_list(index_uni(sym1__), nil_index_list()),
            tflu_flat__[(pos__ - 1)], "assigning variable tflu");
          current_statement__ = 74;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 75;
      context__.validate_dims("data initialization","Kc","int",
          context__.to_vec());
      Kc = std::numeric_limits<int>::min();
      
      current_statement__ = 75;
      Kc = context__.vals_i("Kc")[(1 - 1)];
      current_statement__ = 75;
      current_statement__ = 75;
      check_greater_or_equal(function__, "Kc", Kc, 0);
      current_statement__ = 76;
      context__.validate_dims("data initialization","Kt","int",
          context__.to_vec());
      Kt = std::numeric_limits<int>::min();
      
      current_statement__ = 76;
      Kt = context__.vals_i("Kt")[(1 - 1)];
      current_statement__ = 77;
      context__.validate_dims("data initialization","Kf","int",
          context__.to_vec());
      Kf = std::numeric_limits<int>::min();
      
      current_statement__ = 77;
      Kf = context__.vals_i("Kf")[(1 - 1)];
      current_statement__ = 78;
      context__.validate_dims("data initialization","Kw","int",
          context__.to_vec());
      Kw = std::numeric_limits<int>::min();
      
      current_statement__ = 78;
      Kw = context__.vals_i("Kw")[(1 - 1)];
      current_statement__ = 79;
      validate_non_negative_index("Xcov", "Nsub", Nsub);
      current_statement__ = 80;
      validate_non_negative_index("Xcov", "Kc", Kc);
      current_statement__ = 81;
      context__.validate_dims("data initialization","Xcov","double",
          context__.to_vec(Nsub, Kc));
      Xcov = Eigen::Matrix<double, -1, -1>(Nsub, Kc);
      stan::math::fill(Xcov, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> Xcov_flat__;
        current_statement__ = 81;
        assign(Xcov_flat__, nil_index_list(), context__.vals_r("Xcov"),
          "assigning variable Xcov_flat__");
        current_statement__ = 81;
        pos__ = 1;
        current_statement__ = 81;
        for (int sym1__ = 1; sym1__ <= Kc; ++sym1__) {
          current_statement__ = 81;
          for (int sym2__ = 1; sym2__ <= Nsub; ++sym2__) {
            current_statement__ = 81;
            assign(Xcov,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              Xcov_flat__[(pos__ - 1)], "assigning variable Xcov");
            current_statement__ = 81;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 82;
      validate_non_negative_index("Xtreat", "Nsub", Nsub);
      current_statement__ = 83;
      validate_non_negative_index("Xtreat", "Kt", Kt);
      current_statement__ = 84;
      context__.validate_dims("data initialization","Xtreat","double",
          context__.to_vec(Nsub, Kt));
      Xtreat = Eigen::Matrix<double, -1, -1>(Nsub, Kt);
      stan::math::fill(Xtreat, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> Xtreat_flat__;
        current_statement__ = 84;
        assign(Xtreat_flat__, nil_index_list(), context__.vals_r("Xtreat"),
          "assigning variable Xtreat_flat__");
        current_statement__ = 84;
        pos__ = 1;
        current_statement__ = 84;
        for (int sym1__ = 1; sym1__ <= Kt; ++sym1__) {
          current_statement__ = 84;
          for (int sym2__ = 1; sym2__ <= Nsub; ++sym2__) {
            current_statement__ = 84;
            assign(Xtreat,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              Xtreat_flat__[(pos__ - 1)], "assigning variable Xtreat");
            current_statement__ = 84;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 85;
      validate_non_negative_index("Xflu", "Nsub", Nsub);
      current_statement__ = 86;
      validate_non_negative_index("Xflu", "Kf", Kf);
      current_statement__ = 87;
      context__.validate_dims("data initialization","Xflu","double",
          context__.to_vec(Nsub, Kf));
      Xflu = Eigen::Matrix<double, -1, -1>(Nsub, Kf);
      stan::math::fill(Xflu, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> Xflu_flat__;
        current_statement__ = 87;
        assign(Xflu_flat__, nil_index_list(), context__.vals_r("Xflu"),
          "assigning variable Xflu_flat__");
        current_statement__ = 87;
        pos__ = 1;
        current_statement__ = 87;
        for (int sym1__ = 1; sym1__ <= Kf; ++sym1__) {
          current_statement__ = 87;
          for (int sym2__ = 1; sym2__ <= Nsub; ++sym2__) {
            current_statement__ = 87;
            assign(Xflu,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              Xflu_flat__[(pos__ - 1)], "assigning variable Xflu");
            current_statement__ = 87;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 88;
      validate_non_negative_index("Xk", "Nsub", Nsub);
      current_statement__ = 89;
      validate_non_negative_index("Xk", "Kw", Kw);
      current_statement__ = 90;
      context__.validate_dims("data initialization","Xk","double",
          context__.to_vec(Nsub, Kw));
      Xk = Eigen::Matrix<double, -1, -1>(Nsub, Kw);
      stan::math::fill(Xk, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> Xk_flat__;
        current_statement__ = 90;
        assign(Xk_flat__, nil_index_list(), context__.vals_r("Xk"),
          "assigning variable Xk_flat__");
        current_statement__ = 90;
        pos__ = 1;
        current_statement__ = 90;
        for (int sym1__ = 1; sym1__ <= Kw; ++sym1__) {
          current_statement__ = 90;
          for (int sym2__ = 1; sym2__ <= Nsub; ++sym2__) {
            current_statement__ = 90;
            assign(Xk,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              Xk_flat__[(pos__ - 1)], "assigning variable Xk");
            current_statement__ = 90;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 91;
      validate_non_negative_index("Xbatch", "N", N);
      current_statement__ = 92;
      context__.validate_dims("data initialization","Xbatch","double",
          context__.to_vec(N, 2));
      Xbatch = Eigen::Matrix<double, -1, -1>(N, 2);
      stan::math::fill(Xbatch, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> Xbatch_flat__;
        current_statement__ = 92;
        assign(Xbatch_flat__, nil_index_list(), context__.vals_r("Xbatch"),
          "assigning variable Xbatch_flat__");
        current_statement__ = 92;
        pos__ = 1;
        current_statement__ = 92;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 92;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 92;
            assign(Xbatch,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              Xbatch_flat__[(pos__ - 1)], "assigning variable Xbatch");
            current_statement__ = 92;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 93;
      validate_non_negative_index("obs", "N", N);
      current_statement__ = 94;
      validate_non_negative_index("obs", "Nt", Nt);
      current_statement__ = 95;
      context__.validate_dims("data initialization","obs","double",
          context__.to_vec(N, Nt));
      obs = std::vector<Eigen::Matrix<double, -1, 1>>(N, Eigen::Matrix<double, -1, 1>(Nt));
      stan::math::fill(obs, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> obs_flat__;
        current_statement__ = 95;
        assign(obs_flat__, nil_index_list(), context__.vals_r("obs"),
          "assigning variable obs_flat__");
        current_statement__ = 95;
        pos__ = 1;
        current_statement__ = 95;
        for (int sym1__ = 1; sym1__ <= Nt; ++sym1__) {
          current_statement__ = 95;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 95;
            assign(obs,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              obs_flat__[(pos__ - 1)], "assigning variable obs");
            current_statement__ = 95;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 96;
      validate_non_negative_index("mu_id", "N", N);
      current_statement__ = 97;
      context__.validate_dims("data initialization","mu_id","int",
          context__.to_vec(N));
      mu_id = std::vector<int>(N, std::numeric_limits<int>::min());
      
      current_statement__ = 97;
      assign(mu_id, nil_index_list(), context__.vals_i("mu_id"),
        "assigning variable mu_id");
      current_statement__ = 98;
      context__.validate_dims("data initialization","p_re","int",
          context__.to_vec());
      p_re = std::numeric_limits<int>::min();
      
      current_statement__ = 98;
      p_re = context__.vals_i("p_re")[(1 - 1)];
      current_statement__ = 99;
      I = Eigen::Matrix<double, -1, -1>(3, 3);
      stan::math::fill(I, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 99;
      assign(I, nil_index_list(), rep_matrix(0.0, 3, 3),
        "assigning variable I");
      current_statement__ = 101;
      for (int j = 1; j <= 3; ++j) {
        current_statement__ = 100;
        assign(I,
          cons_list(index_uni(j), cons_list(index_uni(j), nil_index_list())),
          1.0, "assigning variable I");}
      current_statement__ = 102;
      validate_non_negative_index("k", "Kw", Kw);
      current_statement__ = 103;
      validate_non_negative_index("beta_cov", "Kc", Kc);
      current_statement__ = 104;
      validate_non_negative_index("beta_treat", "Kt", Kt);
      current_statement__ = 105;
      validate_non_negative_index("beta_flu", "Kf", Kf);
      current_statement__ = 106;
      validate_non_negative_index("z", "Nsub", Nsub);
      current_statement__ = 107;
      validate_non_negative_index("z", "p_re", p_re);
      current_statement__ = 108;
      validate_positive_index("pii", "p_re", p_re);
      current_statement__ = 109;
      validate_non_negative_index("L", "p_re", p_re);
      current_statement__ = 109;
      validate_non_negative_index("L", "p_re", p_re);
      current_statement__ = 110;
      validate_non_negative_index("psi", "p_re", p_re);
      current_statement__ = 111;
      validate_non_negative_index("psi", "p_re", p_re);
      current_statement__ = 112;
      validate_non_negative_index("batch_eff", "N", N);
      current_statement__ = 113;
      validate_non_negative_index("mu", "Nsub", Nsub);
      current_statement__ = 114;
      validate_non_negative_index("mu", "Nt", Nt);
      current_statement__ = 115;
      validate_non_negative_index("ev", "N", N);
      current_statement__ = 116;
      validate_non_negative_index("ev", "Nt", Nt);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += Kw;
      num_params_r__ += Kc;
      num_params_r__ += Kt;
      num_params_r__ += Kf;
      num_params_r__ += 2;
      num_params_r__ += Nsub * p_re;
      num_params_r__ += (p_re - 1);
      num_params_r__ += 1;
      num_params_r__ += ((p_re * (p_re - 1)) / 2);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI, stan::require_vector_like_t<VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "random_waning_model_namespace::log_prob";
(void) function__;  // suppress unused var warning

    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning

    
    try {
      local_scalar_t__ alpha0;
      alpha0 = DUMMY_VAR__;
      
      current_statement__ = 1;
      alpha0 = in__.scalar();
      local_scalar_t__ sigma;
      sigma = DUMMY_VAR__;
      
      current_statement__ = 2;
      sigma = in__.scalar();
      current_statement__ = 2;
      if (jacobian__) {
        current_statement__ = 2;
        sigma = stan::math::lb_constrain(sigma, 0, lp__);
      } else {
        current_statement__ = 2;
        sigma = stan::math::lb_constrain(sigma, 0);
      }
      local_scalar_t__ k0;
      k0 = DUMMY_VAR__;
      
      current_statement__ = 3;
      k0 = in__.scalar();
      current_statement__ = 3;
      if (jacobian__) {
        current_statement__ = 3;
        k0 = stan::math::lb_constrain(k0, 0, lp__);
      } else {
        current_statement__ = 3;
        k0 = stan::math::lb_constrain(k0, 0);
      }
      Eigen::Matrix<local_scalar_t__, -1, 1> k;
      k = Eigen::Matrix<local_scalar_t__, -1, 1>(Kw);
      stan::math::fill(k, DUMMY_VAR__);
      
      current_statement__ = 4;
      k = in__.vector(Kw);
      Eigen::Matrix<local_scalar_t__, -1, 1> beta_cov;
      beta_cov = Eigen::Matrix<local_scalar_t__, -1, 1>(Kc);
      stan::math::fill(beta_cov, DUMMY_VAR__);
      
      current_statement__ = 5;
      beta_cov = in__.vector(Kc);
      Eigen::Matrix<local_scalar_t__, -1, 1> beta_treat;
      beta_treat = Eigen::Matrix<local_scalar_t__, -1, 1>(Kt);
      stan::math::fill(beta_treat, DUMMY_VAR__);
      
      current_statement__ = 6;
      beta_treat = in__.vector(Kt);
      Eigen::Matrix<local_scalar_t__, -1, 1> beta_flu;
      beta_flu = Eigen::Matrix<local_scalar_t__, -1, 1>(Kf);
      stan::math::fill(beta_flu, DUMMY_VAR__);
      
      current_statement__ = 7;
      beta_flu = in__.vector(Kf);
      Eigen::Matrix<local_scalar_t__, -1, 1> beta_batch;
      beta_batch = Eigen::Matrix<local_scalar_t__, -1, 1>(2);
      stan::math::fill(beta_batch, DUMMY_VAR__);
      
      current_statement__ = 8;
      beta_batch = in__.vector(2);
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> z;
      z = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(Nsub, Eigen::Matrix<local_scalar_t__, -1, 1>(p_re));
      stan::math::fill(z, DUMMY_VAR__);
      
      current_statement__ = 9;
      for (int sym1__ = 1; sym1__ <= Nsub; ++sym1__) {
        current_statement__ = 9;
        assign(z, cons_list(index_uni(sym1__), nil_index_list()),
          in__.vector(p_re), "assigning variable z");}
      Eigen::Matrix<local_scalar_t__, -1, 1> pii;
      pii = Eigen::Matrix<local_scalar_t__, -1, 1>(p_re);
      stan::math::fill(pii, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> pii_in__;
      pii_in__ = Eigen::Matrix<local_scalar_t__, -1, 1>((p_re - 1));
      stan::math::fill(pii_in__, DUMMY_VAR__);
      
      current_statement__ = 10;
      pii_in__ = in__.vector((p_re - 1));
      current_statement__ = 10;
      if (jacobian__) {
        current_statement__ = 10;
        assign(pii, nil_index_list(),
          stan::math::simplex_constrain(pii_in__, lp__),
          "assigning variable pii");
      } else {
        current_statement__ = 10;
        assign(pii, nil_index_list(),
          stan::math::simplex_constrain(pii_in__), "assigning variable pii");
      }
      local_scalar_t__ tau;
      tau = DUMMY_VAR__;
      
      current_statement__ = 11;
      tau = in__.scalar();
      current_statement__ = 11;
      if (jacobian__) {
        current_statement__ = 11;
        tau = stan::math::lb_constrain(tau, 0, lp__);
      } else {
        current_statement__ = 11;
        tau = stan::math::lb_constrain(tau, 0);
      }
      Eigen::Matrix<local_scalar_t__, -1, -1> L;
      L = Eigen::Matrix<local_scalar_t__, -1, -1>(p_re, p_re);
      stan::math::fill(L, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> L_in__;
      L_in__ = Eigen::Matrix<local_scalar_t__, -1, 1>(((p_re * (p_re - 1)) /
                                                        2));
      stan::math::fill(L_in__, DUMMY_VAR__);
      
      current_statement__ = 12;
      L_in__ = in__.vector(((p_re * (p_re - 1)) / 2));
      current_statement__ = 12;
      if (jacobian__) {
        current_statement__ = 12;
        assign(L, nil_index_list(),
          stan::math::cholesky_corr_constrain(L_in__, p_re, lp__),
          "assigning variable L");
      } else {
        current_statement__ = 12;
        assign(L, nil_index_list(),
          stan::math::cholesky_corr_constrain(L_in__, p_re),
          "assigning variable L");
      }
      Eigen::Matrix<local_scalar_t__, -1, -1> psi;
      psi = Eigen::Matrix<local_scalar_t__, -1, -1>(p_re, p_re);
      stan::math::fill(psi, DUMMY_VAR__);
      
      current_statement__ = 13;
      assign(psi, nil_index_list(), diag_pre_multiply(multiply(tau, pii), L),
        "assigning variable psi");
      Eigen::Matrix<local_scalar_t__, -1, 1> batch_eff;
      batch_eff = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
      stan::math::fill(batch_eff, DUMMY_VAR__);
      
      current_statement__ = 14;
      assign(batch_eff, nil_index_list(), multiply(Xbatch, beta_batch),
        "assigning variable batch_eff");
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> mu;
      mu = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(Nsub, Eigen::Matrix<local_scalar_t__, -1, 1>(Nt));
      stan::math::fill(mu, DUMMY_VAR__);
      
      {
        current_statement__ = 16;
        validate_non_negative_index("re_i", "Nsub", Nsub);
        std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> re_i;
        re_i = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(Nsub, Eigen::Matrix<local_scalar_t__, -1, 1>(3));
        stan::math::fill(re_i, DUMMY_VAR__);
        
        current_statement__ = 18;
        validate_non_negative_index("eta", "Nsub", Nsub);
        Eigen::Matrix<local_scalar_t__, -1, 1> eta;
        eta = Eigen::Matrix<local_scalar_t__, -1, 1>(Nsub);
        stan::math::fill(eta, DUMMY_VAR__);
        
        current_statement__ = 19;
        assign(eta, nil_index_list(), add(alpha0, multiply(Xcov, beta_cov)),
          "assigning variable eta");
        current_statement__ = 20;
        validate_non_negative_index("vax_boost", "Nsub", Nsub);
        Eigen::Matrix<local_scalar_t__, -1, 1> vax_boost;
        vax_boost = Eigen::Matrix<local_scalar_t__, -1, 1>(Nsub);
        stan::math::fill(vax_boost, DUMMY_VAR__);
        
        current_statement__ = 21;
        assign(vax_boost, nil_index_list(), multiply(Xtreat, beta_treat),
          "assigning variable vax_boost");
        current_statement__ = 22;
        validate_non_negative_index("flu_boost", "Nsub", Nsub);
        Eigen::Matrix<local_scalar_t__, -1, 1> flu_boost;
        flu_boost = Eigen::Matrix<local_scalar_t__, -1, 1>(Nsub);
        stan::math::fill(flu_boost, DUMMY_VAR__);
        
        current_statement__ = 23;
        assign(flu_boost, nil_index_list(), multiply(Xflu, beta_flu),
          "assigning variable flu_boost");
        current_statement__ = 24;
        validate_non_negative_index("ki", "Nsub", Nsub);
        Eigen::Matrix<local_scalar_t__, -1, 1> ki;
        ki = Eigen::Matrix<local_scalar_t__, -1, 1>(Nsub);
        stan::math::fill(ki, DUMMY_VAR__);
        
        current_statement__ = 25;
        assign(ki, nil_index_list(),
          multiply(k0, stan::math::exp(multiply(Xk, k))),
          "assigning variable ki");
        current_statement__ = 29;
        for (int j = 1; j <= Nsub; ++j) {
          current_statement__ = 26;
          assign(re_i, cons_list(index_uni(j), nil_index_list()),
            multiply(L, z[(j - 1)]), "assigning variable re_i");
          current_statement__ = 27;
          assign(mu, cons_list(index_uni(j), nil_index_list()),
            mu_calc(Nt, (eta[(j - 1)] + re_i[(j - 1)][(1 - 1)]),
              (re_i[(j - 1)][(2 - 1)] + vax_boost[(j - 1)]),
              flu_boost[(j - 1)], tflu[(j - 1)],
              (stan::math::exp(re_i[(j - 1)][(3 - 1)]) * ki[(j - 1)]),
              tvec[(j - 1)],
              rvalue(mask,
                cons_list(index_uni(j),
                  cons_list(index_omni(), nil_index_list())), "mask"), pstream__),
            "assigning variable mu");}
      }
      {
        current_statement__ = 43;
        for (int j = 1; j <= N; ++j) {
          current_statement__ = 41;
          for (int i = 1; i <= 5; ++i) {
            current_statement__ = 39;
            if (logical_gt(w[(j - 1)][(i - 1)], 0)) {
              current_statement__ = 37;
              lp_accum__.add(
                (w[(j - 1)][(i - 1)] *
                  log_lik_fn(y[(j - 1)][(i - 1)], obs[(j - 1)][(i - 1)],
                    (mu[(mu_id[(j - 1)] - 1)][(i - 1)] + batch_eff[(j - 1)]),
                    sigma, pstream__)));
            } }}
        current_statement__ = 44;
        lp_accum__.add(normal_lpdf<propto__>(alpha0, 0, 3));
        current_statement__ = 45;
        lp_accum__.add(std_normal_lpdf<propto__>(sigma));
        current_statement__ = 46;
        lp_accum__.add(std_normal_lpdf<propto__>(tau));
        current_statement__ = 47;
        lp_accum__.add(std_normal_lpdf<propto__>(k0));
        current_statement__ = 48;
        lp_accum__.add(std_normal_lpdf<propto__>(k));
        current_statement__ = 49;
        lp_accum__.add(normal_lpdf<propto__>(beta_cov, 0, 5));
        current_statement__ = 50;
        lp_accum__.add(normal_lpdf<propto__>(beta_treat, 0, 5));
        current_statement__ = 51;
        lp_accum__.add(normal_lpdf<propto__>(beta_flu, 0, 5));
        current_statement__ = 52;
        lp_accum__.add(std_normal_lpdf<propto__>(beta_batch));
        current_statement__ = 53;
        lp_accum__.add(lkj_corr_cholesky_lpdf<propto__>(L, 1));
        current_statement__ = 54;
        lp_accum__.add(exponential_lpdf<propto__>(tau, 1));
        current_statement__ = 55;
        lp_accum__.add(dirichlet_lpdf<propto__>(pii, rep_vector(1.0, p_re)));
        current_statement__ = 57;
        for (int j = 1; j <= Nsub; ++j) {
          current_statement__ = 56;
          lp_accum__.add(std_normal_lpdf<propto__>(z[(j - 1)]));}
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr>
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "random_waning_model_namespace::write_array";
(void) function__;  // suppress unused var warning

    (void) function__;  // suppress unused var warning

    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning

    
    try {
      double alpha0;
      alpha0 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      alpha0 = in__.scalar();
      double sigma;
      sigma = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      sigma = in__.scalar();
      current_statement__ = 2;
      sigma = stan::math::lb_constrain(sigma, 0);
      double k0;
      k0 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      k0 = in__.scalar();
      current_statement__ = 3;
      k0 = stan::math::lb_constrain(k0, 0);
      Eigen::Matrix<double, -1, 1> k;
      k = Eigen::Matrix<double, -1, 1>(Kw);
      stan::math::fill(k, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 4;
      k = in__.vector(Kw);
      Eigen::Matrix<double, -1, 1> beta_cov;
      beta_cov = Eigen::Matrix<double, -1, 1>(Kc);
      stan::math::fill(beta_cov, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 5;
      beta_cov = in__.vector(Kc);
      Eigen::Matrix<double, -1, 1> beta_treat;
      beta_treat = Eigen::Matrix<double, -1, 1>(Kt);
      stan::math::fill(beta_treat, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 6;
      beta_treat = in__.vector(Kt);
      Eigen::Matrix<double, -1, 1> beta_flu;
      beta_flu = Eigen::Matrix<double, -1, 1>(Kf);
      stan::math::fill(beta_flu, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 7;
      beta_flu = in__.vector(Kf);
      Eigen::Matrix<double, -1, 1> beta_batch;
      beta_batch = Eigen::Matrix<double, -1, 1>(2);
      stan::math::fill(beta_batch, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 8;
      beta_batch = in__.vector(2);
      std::vector<Eigen::Matrix<double, -1, 1>> z;
      z = std::vector<Eigen::Matrix<double, -1, 1>>(Nsub, Eigen::Matrix<double, -1, 1>(p_re));
      stan::math::fill(z, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 9;
      for (int sym1__ = 1; sym1__ <= Nsub; ++sym1__) {
        current_statement__ = 9;
        assign(z, cons_list(index_uni(sym1__), nil_index_list()),
          in__.vector(p_re), "assigning variable z");}
      Eigen::Matrix<double, -1, 1> pii;
      pii = Eigen::Matrix<double, -1, 1>(p_re);
      stan::math::fill(pii, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<local_scalar_t__, -1, 1> pii_in__;
      pii_in__ = Eigen::Matrix<local_scalar_t__, -1, 1>((p_re - 1));
      stan::math::fill(pii_in__, DUMMY_VAR__);
      
      current_statement__ = 10;
      pii_in__ = in__.vector((p_re - 1));
      current_statement__ = 10;
      assign(pii, nil_index_list(), stan::math::simplex_constrain(pii_in__),
        "assigning variable pii");
      double tau;
      tau = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 11;
      tau = in__.scalar();
      current_statement__ = 11;
      tau = stan::math::lb_constrain(tau, 0);
      Eigen::Matrix<double, -1, -1> L;
      L = Eigen::Matrix<double, -1, -1>(p_re, p_re);
      stan::math::fill(L, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<local_scalar_t__, -1, 1> L_in__;
      L_in__ = Eigen::Matrix<local_scalar_t__, -1, 1>(((p_re * (p_re - 1)) /
                                                        2));
      stan::math::fill(L_in__, DUMMY_VAR__);
      
      current_statement__ = 12;
      L_in__ = in__.vector(((p_re * (p_re - 1)) / 2));
      current_statement__ = 12;
      assign(L, nil_index_list(),
        stan::math::cholesky_corr_constrain(L_in__, p_re),
        "assigning variable L");
      Eigen::Matrix<double, -1, -1> psi;
      psi = Eigen::Matrix<double, -1, -1>(p_re, p_re);
      stan::math::fill(psi, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> batch_eff;
      batch_eff = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(batch_eff, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<Eigen::Matrix<double, -1, 1>> mu;
      mu = std::vector<Eigen::Matrix<double, -1, 1>>(Nsub, Eigen::Matrix<double, -1, 1>(Nt));
      stan::math::fill(mu, std::numeric_limits<double>::quiet_NaN());
      
      vars__.emplace_back(alpha0);
      vars__.emplace_back(sigma);
      vars__.emplace_back(k0);
      for (int sym1__ = 1; sym1__ <= Kw; ++sym1__) {
        vars__.emplace_back(k[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= Kc; ++sym1__) {
        vars__.emplace_back(beta_cov[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= Kt; ++sym1__) {
        vars__.emplace_back(beta_treat[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= Kf; ++sym1__) {
        vars__.emplace_back(beta_flu[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        vars__.emplace_back(beta_batch[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= p_re; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= Nsub; ++sym2__) {
          vars__.emplace_back(z[(sym2__ - 1)][(sym1__ - 1)]);}}
      for (int sym1__ = 1; sym1__ <= p_re; ++sym1__) {
        vars__.emplace_back(pii[(sym1__ - 1)]);}
      vars__.emplace_back(tau);
      for (int sym1__ = 1; sym1__ <= p_re; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= p_re; ++sym2__) {
          vars__.emplace_back(
            rvalue(L,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())), "L"));}}
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 13;
      assign(psi, nil_index_list(), diag_pre_multiply(multiply(tau, pii), L),
        "assigning variable psi");
      current_statement__ = 14;
      assign(batch_eff, nil_index_list(), multiply(Xbatch, beta_batch),
        "assigning variable batch_eff");
      {
        current_statement__ = 16;
        validate_non_negative_index("re_i", "Nsub", Nsub);
        std::vector<Eigen::Matrix<double, -1, 1>> re_i;
        re_i = std::vector<Eigen::Matrix<double, -1, 1>>(Nsub, Eigen::Matrix<double, -1, 1>(3));
        stan::math::fill(re_i, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 18;
        validate_non_negative_index("eta", "Nsub", Nsub);
        Eigen::Matrix<double, -1, 1> eta;
        eta = Eigen::Matrix<double, -1, 1>(Nsub);
        stan::math::fill(eta, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 19;
        assign(eta, nil_index_list(), add(alpha0, multiply(Xcov, beta_cov)),
          "assigning variable eta");
        current_statement__ = 20;
        validate_non_negative_index("vax_boost", "Nsub", Nsub);
        Eigen::Matrix<double, -1, 1> vax_boost;
        vax_boost = Eigen::Matrix<double, -1, 1>(Nsub);
        stan::math::fill(vax_boost, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 21;
        assign(vax_boost, nil_index_list(), multiply(Xtreat, beta_treat),
          "assigning variable vax_boost");
        current_statement__ = 22;
        validate_non_negative_index("flu_boost", "Nsub", Nsub);
        Eigen::Matrix<double, -1, 1> flu_boost;
        flu_boost = Eigen::Matrix<double, -1, 1>(Nsub);
        stan::math::fill(flu_boost, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 23;
        assign(flu_boost, nil_index_list(), multiply(Xflu, beta_flu),
          "assigning variable flu_boost");
        current_statement__ = 24;
        validate_non_negative_index("ki", "Nsub", Nsub);
        Eigen::Matrix<double, -1, 1> ki;
        ki = Eigen::Matrix<double, -1, 1>(Nsub);
        stan::math::fill(ki, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 25;
        assign(ki, nil_index_list(),
          multiply(k0, stan::math::exp(multiply(Xk, k))),
          "assigning variable ki");
        current_statement__ = 29;
        for (int j = 1; j <= Nsub; ++j) {
          current_statement__ = 26;
          assign(re_i, cons_list(index_uni(j), nil_index_list()),
            multiply(L, z[(j - 1)]), "assigning variable re_i");
          current_statement__ = 27;
          assign(mu, cons_list(index_uni(j), nil_index_list()),
            mu_calc(Nt, (eta[(j - 1)] + re_i[(j - 1)][(1 - 1)]),
              (re_i[(j - 1)][(2 - 1)] + vax_boost[(j - 1)]),
              flu_boost[(j - 1)], tflu[(j - 1)],
              (stan::math::exp(re_i[(j - 1)][(3 - 1)]) * ki[(j - 1)]),
              tvec[(j - 1)],
              rvalue(mask,
                cons_list(index_uni(j),
                  cons_list(index_omni(), nil_index_list())), "mask"), pstream__),
            "assigning variable mu");}
      }
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= p_re; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= p_re; ++sym2__) {
            vars__.emplace_back(
              rvalue(psi,
                cons_list(index_uni(sym2__),
                  cons_list(index_uni(sym1__), nil_index_list())), "psi"));}}
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          vars__.emplace_back(batch_eff[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= Nt; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= Nsub; ++sym2__) {
            vars__.emplace_back(mu[(sym2__ - 1)][(sym1__ - 1)]);}}
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      std::vector<Eigen::Matrix<double, -1, 1>> ev;
      ev = std::vector<Eigen::Matrix<double, -1, 1>>(N, Eigen::Matrix<double, -1, 1>(Nt));
      stan::math::fill(ev, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 36;
      for (int j = 1; j <= N; ++j) {
        current_statement__ = 34;
        for (int i = 1; i <= Nt; ++i) {
          current_statement__ = 32;
          assign(ev,
            cons_list(index_uni(j),
              cons_list(index_uni(i), nil_index_list())),
            expected_value(
              (mu[(mu_id[(j - 1)] - 1)][(i - 1)] + batch_eff[(j - 1)]),
              sigma, 10, pstream__), "assigning variable ev");}}
      for (int sym1__ = 1; sym1__ <= Nt; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          vars__.emplace_back(ev[(sym2__ - 1)][(sym1__ - 1)]);}}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, stan::require_std_vector_t<VecVar>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      double alpha0;
      alpha0 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      alpha0 = context__.vals_r("alpha0")[(1 - 1)];
      double sigma;
      sigma = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      sigma = context__.vals_r("sigma")[(1 - 1)];
      double sigma_free__;
      sigma_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      sigma_free__ = stan::math::lb_free(sigma, 0);
      double k0;
      k0 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      k0 = context__.vals_r("k0")[(1 - 1)];
      double k0_free__;
      k0_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      k0_free__ = stan::math::lb_free(k0, 0);
      Eigen::Matrix<double, -1, 1> k;
      k = Eigen::Matrix<double, -1, 1>(Kw);
      stan::math::fill(k, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> k_flat__;
        current_statement__ = 4;
        assign(k_flat__, nil_index_list(), context__.vals_r("k"),
          "assigning variable k_flat__");
        current_statement__ = 4;
        pos__ = 1;
        current_statement__ = 4;
        for (int sym1__ = 1; sym1__ <= Kw; ++sym1__) {
          current_statement__ = 4;
          assign(k, cons_list(index_uni(sym1__), nil_index_list()),
            k_flat__[(pos__ - 1)], "assigning variable k");
          current_statement__ = 4;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> beta_cov;
      beta_cov = Eigen::Matrix<double, -1, 1>(Kc);
      stan::math::fill(beta_cov, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> beta_cov_flat__;
        current_statement__ = 5;
        assign(beta_cov_flat__, nil_index_list(),
          context__.vals_r("beta_cov"), "assigning variable beta_cov_flat__");
        current_statement__ = 5;
        pos__ = 1;
        current_statement__ = 5;
        for (int sym1__ = 1; sym1__ <= Kc; ++sym1__) {
          current_statement__ = 5;
          assign(beta_cov, cons_list(index_uni(sym1__), nil_index_list()),
            beta_cov_flat__[(pos__ - 1)], "assigning variable beta_cov");
          current_statement__ = 5;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> beta_treat;
      beta_treat = Eigen::Matrix<double, -1, 1>(Kt);
      stan::math::fill(beta_treat, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> beta_treat_flat__;
        current_statement__ = 6;
        assign(beta_treat_flat__, nil_index_list(),
          context__.vals_r("beta_treat"),
          "assigning variable beta_treat_flat__");
        current_statement__ = 6;
        pos__ = 1;
        current_statement__ = 6;
        for (int sym1__ = 1; sym1__ <= Kt; ++sym1__) {
          current_statement__ = 6;
          assign(beta_treat, cons_list(index_uni(sym1__), nil_index_list()),
            beta_treat_flat__[(pos__ - 1)], "assigning variable beta_treat");
          current_statement__ = 6;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> beta_flu;
      beta_flu = Eigen::Matrix<double, -1, 1>(Kf);
      stan::math::fill(beta_flu, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> beta_flu_flat__;
        current_statement__ = 7;
        assign(beta_flu_flat__, nil_index_list(),
          context__.vals_r("beta_flu"), "assigning variable beta_flu_flat__");
        current_statement__ = 7;
        pos__ = 1;
        current_statement__ = 7;
        for (int sym1__ = 1; sym1__ <= Kf; ++sym1__) {
          current_statement__ = 7;
          assign(beta_flu, cons_list(index_uni(sym1__), nil_index_list()),
            beta_flu_flat__[(pos__ - 1)], "assigning variable beta_flu");
          current_statement__ = 7;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> beta_batch;
      beta_batch = Eigen::Matrix<double, -1, 1>(2);
      stan::math::fill(beta_batch, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> beta_batch_flat__;
        current_statement__ = 8;
        assign(beta_batch_flat__, nil_index_list(),
          context__.vals_r("beta_batch"),
          "assigning variable beta_batch_flat__");
        current_statement__ = 8;
        pos__ = 1;
        current_statement__ = 8;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 8;
          assign(beta_batch, cons_list(index_uni(sym1__), nil_index_list()),
            beta_batch_flat__[(pos__ - 1)], "assigning variable beta_batch");
          current_statement__ = 8;
          pos__ = (pos__ + 1);}
      }
      std::vector<Eigen::Matrix<double, -1, 1>> z;
      z = std::vector<Eigen::Matrix<double, -1, 1>>(Nsub, Eigen::Matrix<double, -1, 1>(p_re));
      stan::math::fill(z, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> z_flat__;
        current_statement__ = 9;
        assign(z_flat__, nil_index_list(), context__.vals_r("z"),
          "assigning variable z_flat__");
        current_statement__ = 9;
        pos__ = 1;
        current_statement__ = 9;
        for (int sym1__ = 1; sym1__ <= p_re; ++sym1__) {
          current_statement__ = 9;
          for (int sym2__ = 1; sym2__ <= Nsub; ++sym2__) {
            current_statement__ = 9;
            assign(z,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              z_flat__[(pos__ - 1)], "assigning variable z");
            current_statement__ = 9;
            pos__ = (pos__ + 1);}}
      }
      Eigen::Matrix<double, -1, 1> pii;
      pii = Eigen::Matrix<double, -1, 1>(p_re);
      stan::math::fill(pii, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> pii_flat__;
        current_statement__ = 10;
        assign(pii_flat__, nil_index_list(), context__.vals_r("pii"),
          "assigning variable pii_flat__");
        current_statement__ = 10;
        pos__ = 1;
        current_statement__ = 10;
        for (int sym1__ = 1; sym1__ <= p_re; ++sym1__) {
          current_statement__ = 10;
          assign(pii, cons_list(index_uni(sym1__), nil_index_list()),
            pii_flat__[(pos__ - 1)], "assigning variable pii");
          current_statement__ = 10;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> pii_free__;
      pii_free__ = Eigen::Matrix<double, -1, 1>((p_re - 1));
      stan::math::fill(pii_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 10;
      assign(pii_free__, nil_index_list(), stan::math::simplex_free(pii),
        "assigning variable pii_free__");
      double tau;
      tau = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 11;
      tau = context__.vals_r("tau")[(1 - 1)];
      double tau_free__;
      tau_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 11;
      tau_free__ = stan::math::lb_free(tau, 0);
      Eigen::Matrix<double, -1, -1> L;
      L = Eigen::Matrix<double, -1, -1>(p_re, p_re);
      stan::math::fill(L, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> L_flat__;
        current_statement__ = 12;
        assign(L_flat__, nil_index_list(), context__.vals_r("L"),
          "assigning variable L_flat__");
        current_statement__ = 12;
        pos__ = 1;
        current_statement__ = 12;
        for (int sym1__ = 1; sym1__ <= p_re; ++sym1__) {
          current_statement__ = 12;
          for (int sym2__ = 1; sym2__ <= p_re; ++sym2__) {
            current_statement__ = 12;
            assign(L,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              L_flat__[(pos__ - 1)], "assigning variable L");
            current_statement__ = 12;
            pos__ = (pos__ + 1);}}
      }
      Eigen::Matrix<double, -1, 1> L_free__;
      L_free__ = Eigen::Matrix<double, -1, 1>(((p_re * (p_re - 1)) / 2));
      stan::math::fill(L_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 12;
      assign(L_free__, nil_index_list(), stan::math::cholesky_corr_free(L),
        "assigning variable L_free__");
      vars__.emplace_back(alpha0);
      vars__.emplace_back(sigma_free__);
      vars__.emplace_back(k0_free__);
      for (int sym1__ = 1; sym1__ <= Kw; ++sym1__) {
        vars__.emplace_back(k[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= Kc; ++sym1__) {
        vars__.emplace_back(beta_cov[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= Kt; ++sym1__) {
        vars__.emplace_back(beta_treat[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= Kf; ++sym1__) {
        vars__.emplace_back(beta_flu[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        vars__.emplace_back(beta_batch[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= Nsub; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= p_re; ++sym2__) {
          vars__.emplace_back(z[(sym1__ - 1)][(sym2__ - 1)]);}}
      for (int sym1__ = 1; sym1__ <= (p_re - 1); ++sym1__) {
        vars__.emplace_back(pii_free__[(sym1__ - 1)]);}
      vars__.emplace_back(tau_free__);
      for (int sym1__ = 1; sym1__ <= ((p_re * (p_re - 1)) / 2); ++sym1__) {
        vars__.emplace_back(L_free__[(sym1__ - 1)]);}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("alpha0");
    names__.emplace_back("sigma");
    names__.emplace_back("k0");
    names__.emplace_back("k");
    names__.emplace_back("beta_cov");
    names__.emplace_back("beta_treat");
    names__.emplace_back("beta_flu");
    names__.emplace_back("beta_batch");
    names__.emplace_back("z");
    names__.emplace_back("pii");
    names__.emplace_back("tau");
    names__.emplace_back("L");
    names__.emplace_back("psi");
    names__.emplace_back("batch_eff");
    names__.emplace_back("mu");
    names__.emplace_back("ev");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(Kw)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(Kc)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(Kt)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(Kf)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(2)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(Nsub),
                                             static_cast<size_t>(p_re)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(p_re)});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(p_re),
                                             static_cast<size_t>(p_re)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(p_re),
                                             static_cast<size_t>(p_re)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(Nsub),
                                             static_cast<size_t>(Nt)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N),
                                             static_cast<size_t>(Nt)});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "alpha0");
    param_names__.emplace_back(std::string() + "sigma");
    param_names__.emplace_back(std::string() + "k0");
    for (int sym1__ = 1; sym1__ <= Kw; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "k" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= Kc; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "beta_cov" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= Kt; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "beta_treat" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= Kf; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "beta_flu" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "beta_batch" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= p_re; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= Nsub; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "z" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    for (int sym1__ = 1; sym1__ <= p_re; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "pii" + '.' + std::to_string(sym1__));
      }}
    param_names__.emplace_back(std::string() + "tau");
    for (int sym1__ = 1; sym1__ <= p_re; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= p_re; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "L" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= p_re; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= p_re; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "psi" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "batch_eff" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= Nt; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= Nsub; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "mu" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= Nt; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "ev" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "alpha0");
    param_names__.emplace_back(std::string() + "sigma");
    param_names__.emplace_back(std::string() + "k0");
    for (int sym1__ = 1; sym1__ <= Kw; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "k" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= Kc; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "beta_cov" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= Kt; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "beta_treat" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= Kf; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "beta_flu" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "beta_batch" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= p_re; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= Nsub; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "z" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    for (int sym1__ = 1; sym1__ <= (p_re - 1); ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "pii" + '.' + std::to_string(sym1__));
      }}
    param_names__.emplace_back(std::string() + "tau");
    for (int sym1__ = 1; sym1__ <= ((p_re * (p_re - 1)) / 2); ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "L" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= p_re; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= p_re; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "psi" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "batch_eff" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= Nt; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= Nsub; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "mu" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= Nt; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "ev" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"alpha0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"k0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"k\",\"type\":{\"name\":\"vector\",\"length\":" << Kw << "},\"block\":\"parameters\"},{\"name\":\"beta_cov\",\"type\":{\"name\":\"vector\",\"length\":" << Kc << "},\"block\":\"parameters\"},{\"name\":\"beta_treat\",\"type\":{\"name\":\"vector\",\"length\":" << Kt << "},\"block\":\"parameters\"},{\"name\":\"beta_flu\",\"type\":{\"name\":\"vector\",\"length\":" << Kf << "},\"block\":\"parameters\"},{\"name\":\"beta_batch\",\"type\":{\"name\":\"vector\",\"length\":" << 2 << "},\"block\":\"parameters\"},{\"name\":\"z\",\"type\":{\"name\":\"array\",\"length\":" << Nsub << ",\"element_type\":{\"name\":\"vector\",\"length\":" << p_re << "}},\"block\":\"parameters\"},{\"name\":\"pii\",\"type\":{\"name\":\"vector\",\"length\":" << p_re << "},\"block\":\"parameters\"},{\"name\":\"tau\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"L\",\"type\":{\"name\":\"matrix\",\"rows\":" << p_re << ",\"cols\":" << p_re << "},\"block\":\"parameters\"},{\"name\":\"psi\",\"type\":{\"name\":\"matrix\",\"rows\":" << p_re << ",\"cols\":" << p_re << "},\"block\":\"transformed_parameters\"},{\"name\":\"batch_eff\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"transformed_parameters\"},{\"name\":\"mu\",\"type\":{\"name\":\"array\",\"length\":" << Nsub << ",\"element_type\":{\"name\":\"vector\",\"length\":" << Nt << "}},\"block\":\"transformed_parameters\"},{\"name\":\"ev\",\"type\":{\"name\":\"array\",\"length\":" << N << ",\"element_type\":{\"name\":\"vector\",\"length\":" << Nt << "}},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"alpha0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"k0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"k\",\"type\":{\"name\":\"vector\",\"length\":" << Kw << "},\"block\":\"parameters\"},{\"name\":\"beta_cov\",\"type\":{\"name\":\"vector\",\"length\":" << Kc << "},\"block\":\"parameters\"},{\"name\":\"beta_treat\",\"type\":{\"name\":\"vector\",\"length\":" << Kt << "},\"block\":\"parameters\"},{\"name\":\"beta_flu\",\"type\":{\"name\":\"vector\",\"length\":" << Kf << "},\"block\":\"parameters\"},{\"name\":\"beta_batch\",\"type\":{\"name\":\"vector\",\"length\":" << 2 << "},\"block\":\"parameters\"},{\"name\":\"z\",\"type\":{\"name\":\"array\",\"length\":" << Nsub << ",\"element_type\":{\"name\":\"vector\",\"length\":" << p_re << "}},\"block\":\"parameters\"},{\"name\":\"pii\",\"type\":{\"name\":\"vector\",\"length\":" << (p_re - 1) << "},\"block\":\"parameters\"},{\"name\":\"tau\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"L\",\"type\":{\"name\":\"vector\",\"length\":" << ((p_re * (p_re - 1)) / 2) << "},\"block\":\"parameters\"},{\"name\":\"psi\",\"type\":{\"name\":\"matrix\",\"rows\":" << p_re << ",\"cols\":" << p_re << "},\"block\":\"transformed_parameters\"},{\"name\":\"batch_eff\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"transformed_parameters\"},{\"name\":\"mu\",\"type\":{\"name\":\"array\",\"length\":" << Nsub << ",\"element_type\":{\"name\":\"vector\",\"length\":" << Nt << "}},\"block\":\"transformed_parameters\"},{\"name\":\"ev\",\"type\":{\"name\":\"array\",\"length\":" << N << ",\"element_type\":{\"name\":\"vector\",\"length\":" << Nt << "}},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i) {
        vars.coeffRef(i) = vars_vec[i];
      }
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
  

    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i) {
        params_r.coeffRef(i) = params_r_vec[i];
      }
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }        

};
}
using stan_model = random_waning_model_namespace::random_waning_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return random_waning_model_namespace::profiles__;
}

#endif


